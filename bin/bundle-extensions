#!/usr/bin/env python

import os
from distutils.dir_util import copy_tree

import importlib_metadata
import importlib_resources


# Make a directory for extensions and set it as an environment variable
# to be picked up by webpack.
EXTENSIONS_RELATIVE_PATH = os.path.join('client', 'app', 'extensions')
EXTENSIONS_DIRECTORY = os.path.join(
    os.path.dirname(os.path.dirname(__file__)),
    EXTENSIONS_RELATIVE_PATH)

if not os.path.exists(EXTENSIONS_DIRECTORY):
    os.makedirs(EXTENSIONS_DIRECTORY)
os.environ["EXTENSIONS_DIRECTORY"] = EXTENSIONS_RELATIVE_PATH


def is_resource_dir(module, resource):
    try:
        return (
            resource in importlib_resources.contents(module)
            and not importlib_resources.is_resource(module, resource)
        )
    except TypeError:
        # module isn't a package, so can't have a subdirectory/-package
        return False


for entry_point in importlib_metadata.entry_points().get('redash.extensions', []):

    # Check if there is a "bundle" subdirectory/-package in the
    # entrypoint's module and ignoring the entrypoint if not.
    module_name = entry_point.pattern.match(entry_point.value).group('module')
    if not is_resource_dir(module_name, 'bundle'):
        continue

    with importlib_resources.path(module_name, 'bundle') as bundle_dir:
        # Copy content of extension bundle into extensions directory
        destination = os.path.join(EXTENSIONS_DIRECTORY, entry_point.name)
        print("Copying {} to {}".format(bundle_dir, destination))
        copy_tree(str(bundle_dir), destination)
